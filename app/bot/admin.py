from aiogram import types, Router
from aiogram.filters import Command
from datetime import datetime, date, timedelta
from io import BytesIO

from app.database.models import MetricsModel
from app.database.connection import db
from app.config import config
import logging

logger = logging.getLogger(__name__)
admin_router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in config.ADMIN_IDS

@admin_router.message(Command("admin_today"))
async def admin_today(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        today = date.today()
        metrics = await MetricsModel.calculate_daily_metrics(today)

        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today.strftime('%d.%m.%Y')}**

üë• DAU: {metrics['dau']}
üÜï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {metrics['new_users']}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {metrics['active_users']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Å–µ–≥–æ: {metrics['blocked_total']}
üì® –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è: {metrics['daily_sent']}
üíé –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['paid_active']}
üÜïüíé –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {metrics['paid_new']}
‚ùì –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {metrics['questions']}
üí∞ –í—ã—Ä—É—á–∫–∞: {metrics['revenue']} ‚ÇΩ
"""

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin today command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(Command("admin_range"))
async def admin_range(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /admin_range YYYY-MM-DD YYYY-MM-DD")
            return

        date1_str, date2_str = parts[1], parts[2]
        date1 = datetime.strptime(date1_str, '%Y-%m-%d').date()
        date2 = datetime.strptime(date2_str, '%Y-%m-%d').date()

        if date1 > date2:
            date1, date2 = date2, date1

        rows = await db.fetch(
            """
            SELECT * FROM fact_daily_metrics
            WHERE d BETWEEN $1 AND $2
            ORDER BY d
            """,
            date1, date2
        )

        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        # Calculate totals
        total_dau = sum(row['dau'] for row in rows)
        total_new = sum(row['new_users'] for row in rows)
        total_revenue = sum(row['revenue'] for row in rows)
        total_questions = sum(row['questions'] for row in rows)
        avg_dau = total_dau / len(rows) if rows else 0

        text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date1_str} ‚Äî {date2_str}**

üìÖ –î–Ω–µ–π: {len(rows)}
üë• –û–±—â–∏–π DAU: {total_dau}
üìä –°—Ä–µ–¥–Ω–∏–π DAU: {avg_dau:.1f}
üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_new}
‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_export
"""

        await message.answer(text, parse_mode="Markdown")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
    except Exception as e:
        logger.error(f"Admin range command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@admin_router.message(Command("admin_export"))
async def admin_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /admin_export YYYY-MM-DD YYYY-MM-DD")
            return

        date1_str, date2_str = parts[1], parts[2]
        date1 = datetime.strptime(date1_str, '%Y-%m-%d').date()
        date2 = datetime.strptime(date2_str, '%Y-%m-%d').date()

        if date1 > date2:
            date1, date2 = date2, date1

        rows = await db.fetch(
            """
            SELECT * FROM fact_daily_metrics
            WHERE d BETWEEN $1 AND $2
            ORDER BY d
            """,
            date1, date2
        )

        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        # Create TSV content
        headers = ['date', 'dau', 'new_users', 'active_users', 'blocked_total',
                  'daily_sent', 'paid_active', 'paid_new', 'questions', 'revenue']

        tsv_lines = ['\t'.join(headers)]

        for row in rows:
            line = '\t'.join([str(row[header] if row[header] is not None else 0) for header in headers])
            tsv_lines.append(line)

        tsv_content = '\n'.join(tsv_lines)

        # Create file
        file_buffer = BytesIO(tsv_content.encode('utf-8'))
        filename = f"stats_{date1_str}_{date2_str}.tsv"

        file = types.BufferedInputFile(file_buffer.getvalue(), filename=filename)

        await message.answer_document(
            file,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date1_str} ‚Äî {date2_str}"
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
    except Exception as e:
        logger.error(f"Admin export command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")

@admin_router.message(Command("admin_paid"))
async def admin_paid(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        rows = await db.fetch(
            """
            SELECT u.tg_user_id, u.username, s.plan_code, s.ends_at
            FROM subscriptions s
            JOIN users u ON s.user_id = u.id
            WHERE s.status = 'active' AND s.ends_at > now()
            ORDER BY s.ends_at DESC
            LIMIT 50
            """
        )

        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return

        text = "üíé **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):**\n\n"

        for row in rows:
            username = f"@{row['username']}" if row['username'] else f"ID:{row['tg_user_id']}"
            plan = row['plan_code']
            end_date = row['ends_at'].strftime('%d.%m.%Y')
            text += f"‚Ä¢ {username} ‚Äî {plan} –¥–æ {end_date}\n"

        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin paid command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

@admin_router.message(Command("admin_blocked"))
async def admin_blocked(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    try:
        rows = await db.fetch(
            """
            SELECT tg_user_id, username, blocked_at
            FROM users
            WHERE is_blocked = true
            ORDER BY blocked_at DESC
            LIMIT 50
            """
        )

        if not rows:
            await message.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):**\n\n"

        for row in rows:
            username = f"@{row['username']}" if row['username'] else f"ID:{row['tg_user_id']}"
            blocked_date = row['blocked_at'].strftime('%d.%m.%Y') if row['blocked_at'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"‚Ä¢ {username} ‚Äî {blocked_date}\n"

        if len(text) > 4000:
            text = text[:3900] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

        await message.answer(text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Admin blocked command error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")

def setup_admin_handlers(dp):
    dp.include_router(admin_router)